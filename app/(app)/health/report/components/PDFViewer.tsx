"use client"

import { useRef } from 'react'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Printer } from 'lucide-react'
import { useReactToPrint } from 'react-to-print'

interface PDFViewerProps {
  content: string
}

const PrintableReport = ({ content }: { content: string }) => {
  return (
    <div className="p-4 sm:p-8 bg-white max-w-5xl mx-auto">
      {/* Header */}
      <div className="mb-6 sm:mb-8 pb-4 sm:pb-6 border-b border-gray-200">
        <h1 className="text-2xl sm:text-3xl font-bold text-blue-900 mb-2">Health Report</h1>
        <p className="text-sm sm:text-base text-gray-600">
          {new Date().toLocaleDateString('en-US', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })}
        </p>
      </div>

      {/* Content */}
      <div className="space-y-4 sm:space-y-6">
        <ReactMarkdown 
          remarkPlugins={[remarkGfm]}
          className="prose max-w-none prose-sm sm:prose-base"
          components={{
            // Main title (Health Report)
            h1: ({node, children, ...props}) => {
              const title = Array.isArray(children) ? children[0]?.toString() : children?.toString();
              if (title?.startsWith('Health Report')) {
                return (
                  <div className="bg-sky-100 p-2 rounded-lg">
                    <h1 className="text-2xl font-bold text-sky-900" {...props}>{children}</h1>
                  </div>
                )
              }
              // Numbered sections
              return (
                <div className="mb-3">
                  <div className="bg-emerald-100 p-2 rounded-t-lg">
                    <h1 className="text-xl font-semibold text-emerald-900" {...props}>{children}</h1>
                  </div>
                </div>
              )
            },
            // Section content wrapper
            p: ({node, ...props}) => (
              <div className="bg-gray-50 px-3 py-2 rounded-lg mb-2">
                <p className="text-gray-600 leading-relaxed" {...props} />
              </div>
            ),
            // Lists in sections
            ul: ({node, ...props}) => (
              <div className="bg-gray-50 px-3 py-2 rounded-lg mb-2">
                <ul className="list-disc pl-4 space-y-1" {...props} />
              </div>
            ),
            li: ({node, ...props}) => <li className="text-gray-600" {...props} />,
            // Subsections
            h2: ({node, ...props}) => (
              <div className="bg-amber-100 mt-2 p-2 rounded-lg">
                <h2 className="text-lg font-semibold text-amber-900" {...props} />
              </div>
            ),
            h3: ({node, ...props}) => (
              <div className="bg-sky-50 mt-2 p-2 rounded-lg">
                <h3 className="text-md font-medium text-sky-800" {...props} />
              </div>
            ),
            strong: ({node, ...props}) => <strong className="font-semibold text-gray-900" {...props} />,
            // Tables
            table: ({node, ...props}) => (
              <div className="overflow-x-auto -mx-4 sm:mx-0 mb-4 sm:mb-6 bg-white rounded-lg shadow-sm">
                <table className="min-w-full divide-y divide-gray-200 border" {...props} />
              </div>
            ),
            thead: ({node, ...props}) => <thead className="bg-gray-50" {...props} />,
            tbody: ({node, ...props}) => <tbody className="divide-y divide-gray-200 bg-white" {...props} />,
            tr: ({node, ...props}) => <tr className="hover:bg-gray-50" {...props} />,
            th: ({node, ...props}) => (
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" {...props} />
            ),
            td: ({node, ...props}) => (
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500" {...props} />
            ),
          }}
        >
          {content}
        </ReactMarkdown>
      </div>

      {/* Footer */}
      <div className="mt-8 sm:mt-12 pt-4 sm:pt-6 border-t border-gray-200 text-center text-xs sm:text-sm text-gray-500">
        Generated by Health Report System â€¢ {new Date().toLocaleDateString()}
      </div>
    </div>
  )
}

export function PDFViewer({ content }: PDFViewerProps) {
  const printRef = useRef<HTMLDivElement>(null)

  const handlePrint = useReactToPrint({
    documentTitle: `health-report-${new Date().toISOString().split('T')[0]}`,
    removeAfterPrint: true,
    pageStyle: `
      @page {
        size: A4;
        margin: 20mm;
      }
      @media print {
        body {
          -webkit-print-color-adjust: exact;
          print-color-adjust: exact;
        }
        table {
          border-collapse: collapse;
          width: 100%;
        }
        th, td {
          border: 1px solid #e2e8f0;
        }
      }
    `,
    contentRef: printRef,
  } as Parameters<typeof useReactToPrint>[0])

  return (
    <div className="space-y-4">
      <div className="flex justify-end gap-2">
        <Button 
          onClick={() => {
            if (printRef.current) {
              handlePrint();
            }
          }} 
          variant="outline"
          className="w-full sm:w-auto"
        >
          <Printer className="mr-2 h-4 w-4" />
          Print / Save PDF
        </Button>
      </div>

      {/* Preview */}
      <Card className="p-0 overflow-hidden">
        <div className="bg-gray-100 min-h-[600px] sm:min-h-[800px] overflow-auto">
          <div ref={printRef}>
            <PrintableReport content={content} />
          </div>
        </div>
      </Card>
    </div>
  )
}